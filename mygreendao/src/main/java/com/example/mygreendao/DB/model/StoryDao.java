package com.example.mygreendao.DB.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import com.example.mygreendao.model.Story;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "STORY".
*/
public class StoryDao extends AbstractDao<Story, String> {

    public static final String TABLENAME = "STORY";

    /**
     * Properties of entity Story.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Fid = new Property(0, String.class, "fid", true, "FID");
        public final static Property Fn = new Property(1, String.class, "fn", false, "FN");
        public final static Property Artist = new Property(2, String.class, "artist", false, "ARTIST");
        public final static Property Spell = new Property(3, String.class, "spell", false, "SPELL");
        public final static Property Ds = new Property(4, int.class, "ds", false, "DS");
    };


    public StoryDao(DaoConfig config) {
        super(config);
    }
    
    public StoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY\" (" + //
                "\"FID\" TEXT PRIMARY KEY NOT NULL ," + // 0: fid
                "\"FN\" TEXT," + // 1: fn
                "\"ARTIST\" TEXT," + // 2: artist
                "\"SPELL\" TEXT," + // 3: spell
                "\"DS\" INTEGER NOT NULL );"); // 4: ds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Story entity) {
        stmt.clearBindings();
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(1, fid);
        }
 
        String fn = entity.getFn();
        if (fn != null) {
            stmt.bindString(2, fn);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(4, spell);
        }
        stmt.bindLong(5, entity.getDs());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Story entity) {
        stmt.clearBindings();
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(1, fid);
        }
 
        String fn = entity.getFn();
        if (fn != null) {
            stmt.bindString(2, fn);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(4, spell);
        }
        stmt.bindLong(5, entity.getDs());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Story readEntity(Cursor cursor, int offset) {
        Story entity = new Story( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // artist
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // spell
            cursor.getInt(offset + 4) // ds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Story entity, int offset) {
        entity.setFid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArtist(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSpell(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDs(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Story entity, long rowId) {
        return entity.getFid();
    }
    
    @Override
    public String getKey(Story entity) {
        if(entity != null) {
            return entity.getFid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
